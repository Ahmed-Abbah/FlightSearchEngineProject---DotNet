@model List<FlightsSearchEngineProject.Models.Flight.FlightData>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.4.0/fonts/remixicon.css"
          rel="stylesheet" />
    <link rel="shortcut icon" href="./favicon.svg" type="image/svg+xml">

    <!--
      - custom css link
    -->
    <!--
      - google font link
    -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Comforter+Brush&family=Heebo:wght@400;500;600;700&display=swap"
          rel="stylesheet">
    <link rel="stylesheet" href="~/css/styles.css" />
    <title>Web Design Mastery | Flivan</title>
</head>
<body>
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div id="itineraryDetails"></div>
        </div>
    </div>
    <nav>

        <div class="nav__logo">FlySky</div>
        
       
    </nav>
    <header class="section__container header__container">
        <h1 class="section__header">Trouver et Réserver<br />Une Expérience Exceptionnelle</h1>

        <img src="~/assets/header.jpg" alt="header" />
    </header>

    <section class="section__container booking__container">
        <div class="booking__nav">
            <span>Rechercher votre vol maintenant</span>
        </div>

        @if (ViewData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                <h4>Error:</h4>
                <p>@ViewData["ErrorMessage"]</p>
            </div>
        }

        <form asp-controller="SearchFlight" asp-action="GetFlights" method="post">
            <div class="form__group">
                <span><i class="ri-map-pin-line"></i></span>
                <div class="input__content">
                    <div class="input__group">

                        <input type="text" name="DepartureCity" style="margin-top: 35px;"  id="departureCity" value="@TempData["DepartureCity"]" required />
                        <label for="departureCity" >Ville de départ</label>

                        <div id="departureSuggestions" class="suggestions-container"></div>
                    </div>
                    <p>aisir la ville de départ</p>
                </div>
            </div>
            <div class="form__group">
                <span><i class="ri-map-pin-line"></i></span>
                <div class="input__content">
                    <div class="input__group">

                        <input type="text" name="ArrivalCity" style="margin-top: 35px;" id="arrivalCity" value="@TempData["ArrivalCity"]" required />
                        <label for="ArrivalCity">Ville de retour</label>
                        <div id="arrivalSuggestions" class="suggestions-container"></div>
                    </div>
                    <p>Saisir la ville d'arrivé</p>
                </div>
            </div>
            <div class="form__group">
                <span><i class="ri-user-3-line"></i></span>
                <div class="input__content">
                    <div class="input__group">

                        <input type="number" style="margin-top: 35px;" min="0" name="NumberOfPassengers" id="numberOfPersons" value="@TempData["NumberOfPassengers"]" required />

                        <label for="numberOfPersons">Nombre de places</label>

                    </div>
                    <p>Ajouter des voyageurs</p>
                </div>
            </div>

            <div class="form__group">
                <span><i class="ri-calendar-line"></i></span>
                <div class="input__content">
                    <div class="input__group">

                        <input type="date" style="margin-top: 35px;"  name="DepartureDate" id="departureDate" value="@TempData["DepartureDate"]" required />

                        <label for="departureDate">Date de départ</label>
                    </div>
                    <p>jouter la date de départ</p>
                </div>
            </div>
            <div class="form__group">
                <span><i class="ri-calendar-line"></i></span>
                <div class="input__content">
                    <div class="input__group">


                        <input type="date" style="margin-top: 35px;"  name="ReturnDate" id="returnDate" value="@TempData["ReturnDate"]"  />


                        <label for="returnDate">Date de Retour</label>
                    </div>
                    <p>Ajouter la date de retour</p>
                </div>
            </div>
            <div class="form__group">
                <span><i class="ri-airplane-line"></i></span>
                <div class="input__content">
                    <div class="input__group" style="margin-top: 40px;">
                        <select name="TravelClass" id="classType">
                            <option value="ECONOMY">Économique</option>
                            <option value="BUSINESS">Business</option>
                            <option value="PREMIUM_ECONOMY">Premium Economy</option>
                            <option value="FIRST">First Class</option>
                        </select>

                    </div>
                    <p style="padding-top: 25px;">
                        <i class="ri-airplane-line"></i> Sélectionnez le type de classe
                    </p>
                </div>
                <button style="margin-top: 0px;" class="btn"><i class="ri-search-line"></i> </button>
            </div>
            

        </form>
    </section>



    <section class="section popular">

            
        
        <div class="container">

            <p class="section-subtitle">Nos offres</p>

            <h2 class="h2 section-title"> Resultats de recherche </h2>



            @if (Model != null && Model.Any())
            {
                <div class="form__group" style="display:flex;">

                    <select id="filterOptions" class="btn" style="margin-left: 20px;" onchange="applyFilters()">
                        <option value="all">Tous les vols</option>
                        <option value="avec-escale">Vols avec escales</option>
                        <option value="direct">Vols directs</option>
                    </select>
                    <input type="text" id="departureTime" class="btn" style="width: 180px;margin-left:10px;" placeholder="Saisir l'heure de depart Ex. 14:30" onchange="applyFilters()" />
                    <input type="text" id="arrivalTime" class="btn" style="width: 180px;margin-left:10px;" placeholder="Saisir l'heure d'arrivee Ex. 14:30" onchange="applyFilters()" />


                    <select id="sort-by" class="btn" style="margin-left: 10px;" onchange="applyFilters()">
                        <option value="price">Price</option>
                        <option value="duration">Duration</option>
                        <option value="stops">Number of Stops</option>
                    </select>

                    <select id="sort-order" class="btn" style="margin-left: 10px;" onchange="applyFilters()" >
                        <option value="asc">Ascending</option>
                        <option value="desc">Descending</option>
                    </select>
                    <p class="btn" id="filterResultsCount" style="color:black;margin-left:100px;"></p>

                </div>
              

             

                <ul class="popular-list" id="flightResults">

                    @foreach (var flight in Model)
                    {
                   
                        var stopsAttribute = (flight.Itineraries[0].Segments.Count > 1 ? "avec-escale" : "direct");
                        <li class="flight-item" data-stops="@stopsAttribute" data-departure-time="@flight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.Departure.At"
                            data-arrival-time="@flight.Itineraries[0].Segments.LastOrDefault()?.Arrival.At">
                            <div class="popular-card" data-flight-id="@flight.Id">
                                <figure class="card-banner">
                                    <img src="~/assets/images/airplane.png" width="740" height="518" loading="lazy"
                                         alt="Flight Image" class="img-cover">
                                    <span class="card-badge">
                                        <ion-icon name="time-outline"></ion-icon>
                                     @*    <time datetime="@flight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.Departure.At">
                                            @flight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.Departure.At
                                        </time>
 *@
                                        <time datetime="@FormatDateTime(flight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.Departure.At)">
                                            @FormatDateTime(flight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.Departure.At)
                                        </time>
                                    </span>
                                </figure>

                                <div class="card-content">
                                  
                                    <div class="card-wrapper">
                                        <div class="card-price">A partir de $@flight.Price.Total @flight.Price.Currency</div>

                                    </div>

                                    <h3 class="card-title">
                                        <a href="#">@flight.Itineraries.FirstOrDefault()?.Segments.FirstOrDefault()?.Departure.IataCode to @flight.Itineraries.FirstOrDefault()?.Segments.LastOrDefault()?.Arrival.IataCode</a>
                                    </h3>

                                
                                    <address class="card-location">Date d'arrivée': @FormatDateTime(@flight.Itineraries[0].Segments.LastOrDefault()?.Arrival.At)</address>

                                    
                                    <a class="durationToBeformatter">@flight.Itineraries.FirstOrDefault()?.Duration</a>
                

                                    <button class="show-itinerary-button" style="margin-top:15px;" >Afficher  Details</button>
                                    <div class="itinerary-container" style="display:none;margin-top:30px;" >
                                        @for (int i = 0; i < flight.Itineraries.Count; i++)
                                        { 
                                            var itinerary = flight.Itineraries[i];
                                            <div class="itinerary-details">
                                                @if (i == 0)
                                                {
                                                    <h4> Details de départ du vol</h4>
                                                }
                                                else if (i == 1)
                                                {
                                                    <h4> Details de retour du vol</h4>
                                                }
                                                else
                                                {
                                                    <h4>Itinerary Details</h4>
                                                }
                                                <p>
                                                    <span class="totalDurationforSort" style="display:none;">
                                                        @itinerary.Duration<span />
                                                </p>
                                                <p class="durationToBeformatter">Total duration Duration: <span class="totalDuration">@itinerary.Duration</span></p>
                                                
                                                    @if (itinerary.Segments.Count - 1 == 0)
                                                    {
                                                    <p style="color:brown">Vol direct <span class='totalStops' style="display:none;">@(itinerary.Segments.Count - 1)</span></p>
                                                    ;
                                                    }
                                                    else
                                                    {
                                                    <p style="color:brown">Vol avec escale et le nombre du stops est  <span  style="color:blue" class='totalStops'>@(itinerary.Segments.Count - 1)</span></p>
                                                    }



                                                <!-- Iterate through Segments to display segment details -->
                                                <ul class="segments-list">
                                                    @foreach (var segment in itinerary.Segments)
                                                    {
                                                        <li>
                                                            <div class="segment-details" >
                                                                <p style="color:cadetblue">*Départ: @segment.Departure.IataCode</p>
                                                                <p>--Temps de départ: @FormatDateTime(segment.Departure.At)</p>

                                                                <p class="durationToBeformatter">--Duration: @segment.Duration</p>
                                                                <p style="color:cornflowerblue">*Arrivée: @segment.Arrival.IataCode</p>
                                                                @if (i == 0)
                                                                {
                                                                    <p>--Temps d'arrivée: <span class="flightArrivalTime">@FormatDateTime(segment.Arrival.At)</span></p>
                                                                }
                                                                else
                                                                {
                                                                    
                                                                    <p>--Temps d'arrivée : @FormatDateTime(segment.Arrival.At)</p>

                                                                }

                                                               
                                                            </div>
                                                        </li>
                                                    }

                                                </ul>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No data available</p>
            }

        </div>
    </section>



    <section class="section about">
        <div class="container">

            <div class="about-content">

                <p class="section-subtitle">About Us</p>


                <h2 class="h2 section-title">Découvrez les merveilles du monde</h2>

                <p class="about-text">
                     Si notre aventure a débuté avec une passion pour
                    l'exploration, elle s'est transformée en un engagement à fournifr des expériences de voyage authentiques 
                    et inoubliables. 

                </p>

                <ul class="about-list">

                    <li class="about-item">

                        <div class="about-item-icon">
                            <ion-icon name="compass"></ion-icon>
                        </div>

                        <div class="about-item-content">

                            <h3 class="h3 about-item-title">
                                Guide Touristique

                            </h3>

                            <p class="about-item-text">
                                Nos guides touristiques expérimentés ne sont pas seulement des narrateurs de l'histoire ; 
                                ce sont des conteurs qui donnent vie aux destinations.
                            </p>
                        </div>

                    </li>

                    <li class="about-item">

                        <div class="about-item-icon">
                            <ion-icon name="briefcase"></ion-icon>
                        </div>

                        <div class="about-item-content">
                            <h3 class="h3 about-item-title">Prix Amicaux</h3>

                            <p class="about-item-text">
                              
                                Nous comprenons que le voyage n'est pas seulement un déplacement, 
                                c'est un investissement dans les souvenirs.
                            </p>
                        </div>

                    </li>


                    <li class="about-item">

                        <div class="about-item-icon">
                            <ion-icon name="umbrella"></ion-icon>
                        </div>

                        <div class="about-item-content">

                            <h3 class="h3 about-item-title">Tours Fiables</h3>

                            <p class="about-item-text">
                                Chez FlySky, la fiabilité est notre emblème.
                                Nous planifions méticuleusement chaque tour

                            </p>
                        </div>

                    </li>

                </ul>



            </div>

            <figure class="about-banner">
                <img src="~/assets/images/about-banner.png" width="756" height="842" loading="lazy" alt="" class="w-100">
            </figure>

        </div>
    </section>


    <section class="section blog">
        <div class="container">

            <p class="section-subtitle">TRAVEL SUPPORT</p>


            <h2 class="h2 section-title">Planifiez votre voyage en toute confiance</h2>



            <div class="plan__grid">
                <div class="plan__content">
                    <span class="number">01</span>
                    <h4>Travel Requirements for Dubai</h4>
                    <p>

                        Exigences de voyage pour Dubaï
                        Restez informé et préparé pour votre voyage à Dubaï grâce aux exigences de voyage essentielles,
                        garantissant une expérience fluide et sans tracas dans cette ville dynamique et captivante.
                    </p>
                    <span class="number">02</span>
                    <h4> Assurance voyage multirisque</h4>
                    <p>
                       
                        Une protection complète pour votre tranquillité d'esprit, 
                        couvrant une gamme de risques potentiels de voyage et de situations inattendues.
                    </p>
                    <span class="number">03</span>
                    <h4>Exigences de voyage par destination</h4>
                    <p>
                        Restez informé et planifiez votre voyage en toute simplicité,
                        car nous fournissons des informations à jour sur les exigences 
                        de voyage spécifiques à vos destinations désirées.

                    </p>
                </div>
                <div class="plan__image">
                    <img src="~/assets/plan-1.jpg" alt="plan" />
                    <img src="~/assets/plan-2.jpg" alt="plan" />
                    <img src="~/assets/plan-3.jpg" alt="plan" />
                </div>
            </div>

        </div>
    </section>




    <section class="subscribe">
        <div class="section__container subscribe__container">
        </div>
    </section>

    <style>
        .suggestions-container {
            margin-top: 200px;
            position: absolute;
            border: 1px solid #ccc;
            max-height: 150px;
            overflow-y: auto;
            display: none;
            background-color: white; /* Add background color */
            border-radius: 5px; /* Add border-radius for rounded corners */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Add box shadow for a subtle effect */
        }


        .suggestion-item {
            padding: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease; /* Add transition for smooth hover effect */
        }

            .suggestion-item:hover {
                background-color: #eee; /* Change hover background color */
            }
    </style>



    <a href="#top" class="go-top" data-go-top aria-label="Go To Top">
        <ion-icon name="chevron-up-outline"></ion-icon>
    </a>





    <!--
      - custom js link
    -->
    <script src="~/js/script.js"></script>

    <!--
      - ionicon link
    -->
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>

    <script>

        async function getAccessToken() {
            const clientId = 'OllFoRCGzYf2Gu7oK2H7dqeh3JEOEeg2';
            const clientSecret = 'F4X5O0uqMxkKmEkO';

            const tokenUrl = 'https://test.api.amadeus.com/v1/security/oauth2/token';
            const grantType = 'client_credentials';

            const formData = new URLSearchParams();
            formData.append('grant_type', grantType);
            formData.append('client_id', clientId);
            formData.append('client_secret', clientSecret);

            try {
                const response = await fetch(tokenUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData,
                });

                if (response.ok) {
                    const data = await response.json();
                    const accessToken = data.access_token;
                    console.log('Authorized successfully. Here is your token: ' + accessToken);
                    return accessToken;
                } else {
                    console.error('Error:', response.status, response.statusText);
                    return null;
                }
            } catch (error) {
                console.error('Error:', error.message);
                return null;
            }
        }

        async function fetchCitySuggestions(query) {
            const accessToken = await getAccessToken();
            if (!accessToken) {
                return [];
            }

            const cityEndpoint = 'https://test.api.amadeus.com/v1/reference-data/locations';
            const apiUrl = `${cityEndpoint}?subType=CITY&keyword=${query}`;

            try {
                const response = await fetch(apiUrl, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                    },
                });

                if (response.ok) {
                    const data = await response.json();
                    const citySuggestions = data.data.map(city => city.address.cityName);
                    return citySuggestions;
                } else {
                    console.error('Error:', response.status, response.statusText);
                    return [];
                }
            } catch (error) {
                console.error('Error:', error.message);
                return [];
            }
        }

            document.addEventListener('DOMContentLoaded', function () {
            const departureCityInput = document.getElementById('departureCity');
            const departureSuggestionsContainer = document.getElementById('departureSuggestions');

            const arrivalCityInput = document.getElementById('arrivalCity');
            const arrivalSuggestionsContainer = document.getElementById('arrivalSuggestions');

            async function displayCitySuggestions(suggestions, suggestionsContainer, inputElement) {
                suggestionsContainer.innerHTML = '';
                if (suggestions.length > 0) {
                    suggestions.forEach(city => {
                        const suggestionItem = document.createElement('div');
                        suggestionItem.classList.add('suggestion-item');
                        suggestionItem.textContent = city;

                        suggestionItem.addEventListener('click', function () {
                            inputElement.value = city;
                            suggestionsContainer.style.display = 'none';
                        });

                        suggestionsContainer.appendChild(suggestionItem);
                    });

                    suggestionsContainer.style.display = 'block';
                } else {
                    suggestionsContainer.style.display = 'none';
                }
            }

            departureCityInput.addEventListener('input', async function () {
                const inputText = departureCityInput.value.trim();

                if (inputText.length > 0) {
                    const citySuggestions = await fetchCitySuggestions(inputText);
                    displayCitySuggestions(citySuggestions, departureSuggestionsContainer, departureCityInput);
                } else {
                    departureSuggestionsContainer.style.display = 'none';
                }
            });

            arrivalCityInput.addEventListener('input', async function () {
                const inputText = arrivalCityInput.value.trim();

                if (inputText.length > 0) {
                    const citySuggestions = await fetchCitySuggestions(inputText);
                    displayCitySuggestions(citySuggestions, arrivalSuggestionsContainer, arrivalCityInput);
                } else {
                    arrivalSuggestionsContainer.style.display = 'none';
                }
            });
        });


   
    
      


        function applyFilters() {
            // Sorting variables
            var sortBy = document.getElementById("sort-by").value;
            var sortOrder = document.getElementById("sort-order").value;
            var flightsContainer = document.querySelector('.popular-list');
            var filterResultsCountElement = document.getElementById("filterResultsCount")
            // Retrieve the value selected in the selector
            var filterOption = document.getElementById("filterOptions").value;

            // Retrieve the departure time entered by the user
            var departureTimeInput = document.getElementById("departureTime");
            var departureTime = departureTimeInput.value.trim();

            // Retrieve the arrival time entered by the user
            var arrivalTimeInput = document.getElementById("arrivalTime");
            var arrivalTime = arrivalTimeInput.value.trim();

            // Select all flight elements
            var flights = document.querySelectorAll('.flight-item');

            // Convert NodeList to array
            var flightsArray = Array.from(flights);

            // Sort the flights based on the selected criteria (sortBy and sortOrder)
            flightsArray.sort(function (a, b) {
                var aValue, bValue;

                switch (sortBy) {
                    case "price":
                        aValue = parseFloat(a.querySelector('.card-price').innerText.match(/\d+\.\d+/)[0]);
                        bValue = parseFloat(b.querySelector('.card-price').innerText.match(/\d+\.\d+/)[0]);
                        break;
                    case "duration":
                        aValue = convertDurationToMinutes(a.querySelector('.totalDurationforSort').innerText);
                        bValue = convertDurationToMinutes(b.querySelector('.totalDurationforSort').innerText);
                        break;
                    case "stops":
                        aValue = parseInt(a.querySelector('.totalStops').innerText.match(/\d+/)[0]);
                        bValue = parseInt(b.querySelector('.totalStops').innerText.match(/\d+/)[0]);
                        break;
                    default:
                        return 0;
                }

                return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
            });

            // Clear the current content in the container
            flightsContainer.innerHTML = '';

            // Append the sorted flights to the container
            flightsArray.forEach(function (flight) {
                flightsContainer.appendChild(flight);
            });
            var filteredResultsCount = 0;
            // Now, apply filtering based on user input
            flightsArray.forEach(function (flight) {
                var stopsAttribute = flight.getAttribute('data-stops');
                var departureTimeAttribute = flight.getAttribute('data-departure-time');
                var arrivalTimeAttribute = flight.getAttribute('data-arrival-time');

                // Display or hide the flight based on the filter options
                var showFlight = (filterOption === 'all' || (filterOption === 'avec-escale' && stopsAttribute === 'avec-escale') || (filterOption === 'direct' && stopsAttribute === 'direct'));

                // If the filter by departure time option is provided, apply the filter
                if (departureTime !== '' && departureTime !== departureTimeAttribute.split('T')[1].substring(0, 5)) {
                    showFlight = false;
                }

                // If the filter by arrival time option is provided, apply the filter
                if (arrivalTime !== '' && arrivalTime !== arrivalTimeAttribute.split('T')[1].substring(0, 5)) {
                    showFlight = false;
                }

                // Display or hide the flight based on combined filter options
                flight.style.display = showFlight ? 'block' : 'none';
                if (showFlight) {
                    filteredResultsCount++;
                }
            });
            filterResultsCountElement.innerText = filteredResultsCount + " Résultat(s) trouvé.";
        }

        @functions {
            public string FormatDateTime(string dateTime)
            {
                if (DateTime.TryParse(dateTime, out var parsedDateTime))
                {
                    return parsedDateTime.ToString("yyyy-MM-dd HH:mm:ss");
                }

                return string.Empty;
            }
        }

    
        

        function parseTime(timeString) {
            var parts = timeString.split(':');
            return {
                hour: parseInt(parts[0], 10),
                minute: parseInt(parts[1], 10)
            };
        }

        function compareTime(time1, time2) {
            return time1.hour === time2.hour && time1.minute === time2.minute;
        }

        function extractHour(dateTimeString) {
            return dateTimeString.split('T')[1].substring(0, 5);
        }
    
        

        

        function sortFlights() {
            var sortBy = document.getElementById("sort-by").value;
            var sortOrder = document.getElementById("sort-order").value;
            var flightsContainer = document.querySelector('.popular-list');

            // Convert the NodeList to an array for easier manipulation
            var flights = Array.from(document.querySelectorAll('.popular-card'));

            flights.sort(function (a, b) {
                var aValue, bValue;

                switch (sortBy) {
                    case "price":
                        aValue = parseFloat(a.querySelector('.card-price').innerText.match(/\d+\.\d+/)[0]);
                        bValue = parseFloat(b.querySelector('.card-price').innerText.match(/\d+\.\d+/)[0]);
                        break;
                    case "duration":

                        aValue = convertDurationToMinutes(a.querySelector('.totalDurationforSort').value);
                        bValue = convertDurationToMinutes(b.querySelector('.totalDurationforSort').value);
                        
                        break;
                    case "stops":
                        aValue = parseInt(a.querySelector('.totalStops').innerText.match(/\d+/)[0]);
                        bValue = parseInt(b.querySelector('.totalStops').innerText.match(/\d+/)[0]);
                        break;
                    default:
                        return 0;
                }

                return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
            });

            // Clear the current content in the container
            flightsContainer.innerHTML = '';

            // Append the sorted flights to the container
            flights.forEach(function (flight) {
                flightsContainer.appendChild(flight);
            });
        }


        function formatDuration(duration) {
            const regex = /PT(\d*)H(\d*)M?/;
            const match = duration.match(regex);

            if (match) {
                const hours = parseInt(match[1]) || 0;
                const minutes = parseInt(match[2]) || 0;

                if (hours > 0 && minutes > 0) {
                    return hours + " hours and " + minutes + " minutes";
                } else if (hours > 0) {
                    return hours + " hours";
                } else if (minutes > 0) {
                    return minutes + " minutes";
                } else {
                    return "0 minutes";
                }
            }

            return duration;
        }

        // Function to format all elements with class 'durationToBeformatter'
        function formatAllDurations() {
            const elements = document.querySelectorAll('.durationToBeformatter');
            elements.forEach(element => {
                const originalDuration = element.textContent;
                const formattedDuration = formatDuration(originalDuration);
                element.textContent = formattedDuration;
            });
        }

        // Call the function after the document is loaded
        document.addEventListener('DOMContentLoaded', function () {
            formatAllDurations();
        });


        function convertDurationToMinutes(duration) {
            const regex = /PT(\d*)H(\d*)M?/;
            const match = duration.match(regex);

            if (!match) {
                return 0;
            }

            const hours = match[1] ? parseInt(match[1]) : 0;
            const minutes = match[2] ? parseInt(match[2]) : 0;

            return hours * 60 + minutes;
        }




        





        
    </script>


    <script>
        // JavaScript to handle card click and show/hide itinerary details
        var flightCards = document.querySelectorAll('.popular-card');

        flightCards.forEach(function (card) {
            // Get the button and itinerary details container within each card
            var showItineraryButton = card.querySelector('.show-itinerary-button');
            var itineraryContainer = card.querySelector('.itinerary-container');

            showItineraryButton.addEventListener('click', function () {
                // Toggle the display property of the itinerary details container
                if (itineraryContainer.style.display === 'none' || itineraryContainer.style.display === '') {
                    itineraryContainer.style.display = 'block';
                } else {
                    itineraryContainer.style.display = 'none';
                }
            });
        });
    </script>

</body>
</html>

